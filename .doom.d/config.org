#+TITLE: Org Mode Configuration
#+AUTHOR: Phillip O'Reggio
#+PROPERTY: header-args :emacs-lisp :tangle yes :comments link
#+STARTUP: hideblocks
#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC

* General
** Private Information
Load some personal information
#+BEGIN_SRC emacs-lisp
(load! "Secret.el")
#+END_SRC

** Font, Themes, and the General Look and Behavior
*** Look
Set the color theme and font
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'cornell)
(setq doom-font (font-spec :family "MesloLGS Nerd Font" :size 16))
#+END_SRC

Make the emacs frame transparent because I like my laptop background ðŸ™ƒ
#+BEGIN_SRC emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(80 80))
(add-to-list 'default-frame-alist '(alpha 80 80))
#+END_SRC

Make emacs start centered on my macbook pro, and in a decently large frame.
#+BEGIN_SRC emacs-lisp
(setq initial-frame-alist '((top . 50) (left . 240) (width . 120) (height . 45)))
#+END_SRC

Show Line numbers
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
#+END_SRC

Modify the appearance of the mode-line
#+BEGIN_SRC elisp
(setq doom-modeline-major-mode-icon t)
#+END_SRC

*** Behavior
Add a fill column to prevent long lines (116 is the width of the vertical monitor)
#+BEGIN_SRC emacs-lisp
(setq-default fill-column 116)
#+END_SRC
and automatically break long lines in source code buffers
#+BEGIN_SRC emacs-lisp
(add-hook! prog-mode (auto-fill-mode t))
#+END_SRC

Show a message when doing garbage collection
#+BEGIN_SRC emacs-lisp
(setq garbage-collection-messages t)
#+END_SRC

Have evil-mode treat emacs /symbols/ as words instead of by character
(symbol definition changes based on the language)
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'evil
    (defalias #'forward-evil-word #'forward-evil-symbol)
    ;; make evil-search-word look for symbol rather than word boundaries
    (setq-default evil-symbol-word-search t))

#+END_SRC
** Keybindings and Custom Commands
*** Keybindings
Make moving around splits as easy as pressing space.
#+BEGIN_SRC emacs-lisp
(map! :leader :mode 'global
  "h" #'evil-window-left
  "l" #'evil-window-right
  "j" #'evil-window-down
  "k" #'evil-window-up

  "H" #'+evil/window-move-left
  "L" #'+evil/window-move-right
  "K" #'+evil/window-move-up
  "J" #'+evil/window-move-down
  )
#+END_SRC

Change ";" to ":" (for vim ex mode)
#+BEGIN_SRC emacs-lisp
(map! :nv
  ";" 'evil-ex
  )
#+END_SRC

Map "s" to the sneak motion
#+BEGIN_SRC emacs-lisp
;; Unbind "s" from everything else
(map! :after evil
      :map evil-normal-state-map
      "s" nil
      "S" nil)
(map! :after evil-snipe
      :map evil-snipe-local-mode-map
      :mno "s" nil
      :mno "S" nil)
;; Then bind it
(map!
 :nv "s" #'evil-avy-goto-char-2-below
 :n "S" #'evil-avy-goto-char-2-above
 )
#+END_SRC

*** Custom ex Commands
~:G~ for magit status
#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "G" #'magit-status)
#+END_SRC

~:Fexplore~ to open a project drawer
#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "Fexplore" #'treemacs)
#+END_SRC

~:PRReview~ to diff between two branches
#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "PRReview" #'magit-diff-range)
#+END_SRC

~:STerm~ to open terminal in a split
#+BEGIN_SRC emacs-lisp
(defun sterm ()
  "Opens a terminal in a split on the left"
  (interactive)
  (progn
    (split-window-right 45)
    (+vterm/here t)
    )
  )

(evil-ex-define-cmd "STerm" #'sterm)
#+END_SRC
** Useful Functions
Toggle the transparency of emacs
#+BEGIN_SRC emacs-lisp
;; Initialize transparency to `true`
(put 'cfg-transparency 'state t)

(defun toggle-transparency ()
  "Toggle the transparency of emacs"
  (interactive)
  (if (get 'cfg-transparency 'state)
      (progn
        (set-frame-parameter (selected-frame) 'alpha '(100 100))
        (put 'cfg-transparency 'state nil))
    (progn
      (set-frame-parameter (selected-frame) 'alpha '(80 80))
      (put 'cfg-transparency 'state t))
    ))
#+END_SRC

Enable a "focusing" state that disables buffer/workspace switching, and disables the games
Good for lectures and situations where I don't want ot be tempted by working on something else
#+BEGIN_SRC elisp
;; List of commands to disable
(setq focus-commands-to-disable
  '(
    ;; Switching workspaces
    +ivy/switch-workspace-buffer
    ivy-switch-buffer
    +workspace:switch-next
    counsel-recentf
    +workspace/switch-to
    +workspace/switch-to-0
    +workspace/switch-to-1
    +workspace/switch-to-2
    +workspace/switch-to-3
    +workspace/switch-to-4
    +workspace/switch-to-5
    +workspace/switch-to-6
    +workspace/switch-to-7
    +workspace/switch-to-8
    ;; Games
    tetris
    gomoku
    )
  )

(defun start-focusing ()
  "Disable games and some workspace keybinds to better focus."
  (interactive)
  (dolist (command focus-commands-to-disable)
    (disable-command command))
  )

(defun stop-focusing ()
  (interactive)
  "Re-enable gaes and workspce switching keybinds disabled by `start-focusing`"
  (dolist (command focus-commands-to-disable)
    (enable-command command))
  )
#+END_SRC

* Modes
** Org Mode
*** Look
Set the org directory for org related files
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org/agenda/")
#+END_SRC

Make org-mode documents look a little nicer by hiding markers and showing symbols
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
(setq org-pretty-entities t)
#+END_SRC

_Snippets to prettify Org mode based on this:_ [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][Beautifying Org Mode in Emacs]]:

Replace bullets with symbols
,#+BEGIN_SRC emacs-lisp
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))
#+END_SRC

Enable =org-bullets= mode
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

Make org-mode files use variable pitch fonts to look more like text documents
#+BEGIN_SRC emacs-lisp
 (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Helvitica" :height 200 :weight normal))))
   '(fixed-pitch ((t ( :family "MesloLGS Nerd Font" :height 160)))))

(add-hook 'org-mode-hook 'variable-pitch-mode)
#+END_SRC

Files can opt out by having this at the *end* of the file:
#+BEGIN_EXAMPLE org
;; Local Variables:
;; eval: (variable-pitch-mode 0)
;; End:
#+END_EXAMPLE

But not for things that shouldn't be variable pitch
#+BEGIN_SRC emacs-lisp
(custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-block-begin-line ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch))))
   '(org-drawer ((t (:inherit fixed-pitch))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch)))))
   '(line-number ((t (:inherit fixed-pitch))))
   '(line-number-current-line ((t (:inherit fixed-pitch))))
   '(font-lock-comment-face ((t (:inherit fixed-pitch)))))
#+END_SRC

*** Functionality
Fix a bug (?) where inserting newlines using the enter key doesn't work in org-mode ("symbol definition is void")
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda () (electric-indent-local-mode -1)))
#+END_SRC

Setup =org-download=, which makes the process of putting images into orgmode much easier
Put downloaded images into an =images= directory and include timestamp. Use the command =pngpaste= to get the image
from the clipboard.
#+BEGIN_SRC emacs-lisp
(require 'org-download)
(setq org-download-method 'directory)
(setq-default org-download-image-dir "images")
(setq org-download-timestamp "%Y%m%d-%H%M%S_")
(setq org-download-screenshot-method "/usr/local/bin/pngpaste %s")
#+END_SRC

Allow pasting of images with control over the width, and bind it to keybind
#+BEGIN_SRC emacs-lisp
(defun org-download-screenshot-with-size ()
  "Prompt user for a width to paste the image. Only lasts for this one function"
  (interactive)
  (let ((width (read-number "Enter width: ")) (prev-width org-download-image-html-width))
    (progn
      (setq org-download-image-html-width width)
      (org-download-screenshot)
      (setq org-download-image-html-width prev-width))
    ))

(map! :mode 'org-mode :leader
      "v" #'org-download-screenshot-with-size
      )
#+END_SRC

Make drag-and-drop of images work with dired (untested)
#+BEGIN_SRC emacs-lisp
;; Drag-and-drop to `dired`
(add-hook 'dired-mode-hook 'org-download-enable)
#+END_SRC

** Ivy
Config for the search engine, Ivy.

Allow fuzzy searches to make it easier to find matches with less thought.
#+BEGIN_SRC emacs-lisp

(setq ivy-re-builders-alist
      '((t . ivy--regex-fuzzy)))
#+END_SRC

Show icons in ivy buffer
#+BEGIN_SRC emacs-lisp
(all-the-icons-ivy-rich-mode 1)
(ivy-rich-mode)
#+END_SRC

** Working with PDFs
Settings that make PDFs more pleasant to wor  k with.

Enable ~latex-preview-pane-mode~ which allows previewing latex in a buffer (like Overleaf)
- TODO now giving error...
#+BEGIN_SRC emacs-lisp
(after! latex-mode (latex-preview-pane-enable))
#+END_SRC

Make PDFs look sharper on MacOS
#+BEGIN_SRC emacs-lisp
(setq pdf-view-use-scaling t pdf-view-use-imagemagick nil)
#+END_SRC

** Company
Configurations for Company.

Configure completion settings;
Make it faster for code buffers, but slow for org-mode when writing prose
#+BEGIN_SRC emacs-lisp
(defun set-company-for-prose ()
  "Change company configs for writing prose"
  (interactive)
  (setq
   company-idle-delay 0.6
   company-minimum-prefix-length 4
   )
)

(defun set-company-for-code ()
  "Change company configs for writing code"
  (interactive)
  (setq
   company-idle-delay 0.1
   company-minimum-prefix-length 2
   )
)

(after! company (add-hook! '(org-mode text-mode) (set-company-for-prose)))
(after! company (add-hook! prog-mode (set-company-for-code)))
#+END_SRC

Add neat symbols to completion results â™»
#+BEGIN_SRC emacs-lisp
(after! company (add-hook! company-mode (company-box-mode)))
#+END_SRC

*** Set up extra completions for certain modes
Recommend words when typing in text mode files:
#+BEGIN_SRC emacs-lisp
(add-hook! text-mode
  (set-company-backend! 'text-mode 'company-ispell 'company-dabbrev)
)
#+END_SRC

Recommend previously used words in AMPL mode
#+BEGIN_SRC emacs-lisp
(add-hook! ampl-mode
  (set-company-backend! 'ampl-mode 'company-dabbrev)
)
#+END_SRC

Recommend previously used words in swift files to compensate for spotty sourcekit support:
#+BEGIN_SRC emacs-lisp
(add-hook! swift-mode
  (set-company-backend! 'swift-mode '(company-dabbrev company-capf company-yasnippet))
)
#+END_SRC

And in rust
#+BEGIN_SRC emacs-lisp
(add-hook! rust-mode
  (set-company-backend! 'rust-mode '(company-capf company-dabbrev company-yasnippet))
  )
#+END_SRC

** Flycheck
Set python path
#+BEGIN_SRC emacs-lisp
(setq flycheck-json-python-json-executable "/usr/bin/python3")
#+END_SRC
** Palette Mode
Load =palette mode=
#+BEGIN_SRC emacs-lisp
(require 'palette)
#+END_SRC

** Evil-snipe mode
Disable its keybindings to use =evil-avy-goto-char-2-below=
#+BEGIN_SRC emacs-lisp
(require 'evil-snipe)
(evil-snipe-mode nil)
(evil-snipe-override-mode nil)
#+END_SRC

* Programming
** Class Specific
Harmony
#+BEGIN_SRC emacs-lisp
(autoload 'harmony-mode "harmony-mode" "Harmony editing mode." t)
#+END_SRC

** OR Tools
Useful stuff for working with linear programs and the like.

Hook AMPL relate files to [[https://github.com/dpo/ampl-mode][ampl-mode]].
#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist
      (cons '("\\.mod$" . ampl-mode) auto-mode-alist))
(setq auto-mode-alist
      (cons '("\\.dat$" . ampl-mode) auto-mode-alist))
(setq auto-mode-alist
      (cons '("\\.ampl$" . ampl-mode) auto-mode-alist))
(setq interpreter-mode-alist
      (cons '("ampl" . ampl-mode)
            interpreter-mode-alist))
(autoload 'ampl-mode "ampl-mode" "Ampl editing mode." t)
#+END_SRC

** Rust
Configs for coding in the rust programming language.

Set ~RUST_SRC_PATH~ for racer:
#+BEGIN_SRC emacs-lisp
(let* ((rust-lib-path "/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library")
       (rust-full-path (concat (substitute-in-file-name "$HOME") rust-lib-path)))
  (setq racer-rust-src-path rust-full-path))
#+END_SRC

** Swift
Config for the swift programming language.

Setup lsp-sourcekit to work swift files...
#+BEGIN_SRC emacs-lisp
(setq lsp-sourcekit-executable "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/sourcekit-lsp")
(add-hook! swift-mode (lambda () (lsp)))
#+END_SRC
- TODO good completion for .xcodeprojs and modules would be nice

** TODO Python
Fix paths to python since homebrew on Macos is seemingly broken
#+BEGIN_SRC emacs-lisp
(setq flycheck-python-pylint-executable "/usr/bin/python3")
(setq flycheck-python-flake8-executable "/usr/bin/python3")
(setq flycheck-python-pycompile-executable "/usr/bin/python3")
#+END_SRC

* Orgmode footer args
#+localWords: MacOS, PDFs, ampl, Config, Configs, sourcekit, flycheck
