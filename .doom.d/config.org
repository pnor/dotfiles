#+TITLE: Org Mode Configuration
#+AUTHOR: Phillip O'Reggio
#+PROPERTY: header-args :emacs-lisp :tangle yes :comments link
#+STARTUP: hideblocks overview
#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC

* General
** Private Information
Load some personal information
#+BEGIN_SRC emacs-lisp
(load! "Secret.el")
#+END_SRC

** Library Functions
Functions used in other places in the configs
#+BEGIN_SRC emacs-lisp
;; Get a live xwidget buffer with url opened
(defun personal--xwidget-buffer (url)
  (xwidget-webkit-browse-url url)
  (let ((xwidget-buf (seq-find
                      (lambda (b) (eq (buffer-local-value 'major-mode b) 'xwidget-webkit-mode))
                      (buffer-list))))
    xwidget-buf))
#+END_SRC
** Font, Themes, and the General Look and Behavior
*** Look
Set the color theme and font
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'starry)
;; (setq doom-font (font-spec :family "MesloLGS Nerd Font" :size 16))
(setq doom-font (font-spec :family "CozetteVector" :size 18))

;; (setq doom-font (font-spec :family "Cascadia Code" :size 18))
#+END_SRC

Make the emacs frame transparent because I like my laptop background 🙃
#+BEGIN_SRC emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(70 70))
(add-to-list 'default-frame-alist '(alpha 70 70))
#+END_SRC

Make emacs start full screen
I call it *3 times* so that it will be full screen, but also transparent. (Surely there is a less janky way to acheive
that though)
#+BEGIN_SRC emacs-lisp
(toggle-frame-fullscreen)
;; (toggle-frame-fullscreen)
;; (toggle-frame-fullscreen)
#+END_SRC

Show global display fill column
#+BEGIN_SRC emacs-lisp
(global-display-fill-column-indicator-mode t)
#+END_SRC

Show Line numbers
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
#+END_SRC

Modify the appearance of the mode-line
#+BEGIN_SRC elisp
(setq doom-modeline-major-mode-icon t)
#+END_SRC

*** Behavior
Add a fill column to prevent long lines (116 is the width of the vertical monitor)
#+BEGIN_SRC emacs-lisp
(setq-default fill-column 100)
#+END_SRC

and automatically break long lines in source code buffers and org mode files
#+BEGIN_SRC emacs-lisp
(add-hook! prog-mode (auto-fill-mode t))
(add-hook! org-mode (auto-fill-mode t))
#+END_SRC

Show a message when doing garbage collection
#+BEGIN_SRC emacs-lisp
(setq garbage-collection-messages t)
#+END_SRC

Have evil-mode treat emacs /symbols/ as words instead of by character
(symbol definition changes based on the language)
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'evil
    (defalias #'forward-evil-word #'forward-evil-symbol)
    ;; make evil-search-word look for symbol rather than word boundaries
    (setq-default evil-symbol-word-search t))

#+END_SRC
** Splash Screen Edits
Remove the options on the splash screen I don't use
#+BEGIN_SRC emacs-lisp
(defun personal-change-doom-dashboard-options ()
  "Change dashboard options for start screen"
  (setq +doom-dashboard-menu-sections
        '(("Reload last session" :icon
           (all-the-icons-octicon "history" :face 'doom-dashboard-menu-title)
           :when
           (cond
            ((featurep! :ui workspaces)
             (file-exists-p
              (expand-file-name persp-auto-save-fname persp-save-dir)))
            ((require 'desktop nil t)
             (file-exists-p
              (desktop-full-file-name))))
           :face
           (:inherit
            (doom-dashboard-menu-title bold))
           :action doom/quickload-session)
          ("Open private configuration" :icon
           (all-the-icons-octicon "tools" :face 'doom-dashboard-menu-title)
           :when
           (file-directory-p doom-private-dir)
           :action doom/open-private-config))))
#+END_SRC

Last crash info
- grabs latest crash log in
#+BEGIN_SRC elisp
(defun personal-last-crash-delta (crash-log-dir)
  "Computes time since last crash.
Return result as a numeric number that needs to be converted to human readable string using `ts-human-format-duration'.
CRASH-LOG-DIR is the directory where Emacs crash log is located (used to run touch)"
  (require 'ts)
  (let* ((dir-name (expand-file-name crash-log-dir))
         (last-crash-log (shell-command-to-string (format "ls -r %s | rg -i emacs | head -1"
                                                          dir-name)))
         (last-crash-time-string (shell-command-to-string
                                  (format "date -r %s -R"
                                          (concat dir-name "/" last-crash-log))))
         (now-string (shell-command-to-string "date -R"))
         (last-crash-time (ts-parse last-crash-time-string))
         (now-time (ts-parse now-string)))
    (ts-diff now-time last-crash-time)))

(defun personal-is-longest-no-crash-time (delta best-time-file)
  "Return `t' if DELTA is bigger than the number in BEST-TIME-FILE.
Also handles updating the number if it is bigger, or creating it if it doesn't exist."
  (let ((best-time-file-name (expand-file-name best-time-file)))
    (unless (file-exists-p best-time-file-name)
      (write-region "0" nil best-time-file-name))
    (let ((best-delta (string-to-number (with-temp-buffer
                        (insert-file-contents best-time-file-name)
                        (buffer-string)))))
      (if (> delta best-delta)
          (progn
            ;; write that to file instead
            (write-region (number-to-string delta) nil best-time-file-name)
            ;; return t
            t)
        nil))))


(defun doom-last-crash-line (&optional best-time-file)
  "Say how long since Emacs last crashed.
BEST-TIME-NAME is optional and specifies absolute path to file that contains the longest time Emacs"
  (let* ((delta (personal-last-crash-delta "~/Library/Logs/DiagnosticReports"))
         (delta-string (ts-human-format-duration delta)))
    (if (personal-is-longest-no-crash-time delta "~/.doom.d/splash-longest-last-crash.txt")
        (format "%s since last incident! (NEW RECORD!)" delta-string)
      (format "%s since last incident!" delta-string))))

(defun doom-dashboard-phrase ()
  "Get a splash phrase, flow it over multiple lines as needed, and make fontify it."
  (mapconcat
   (lambda (line)
     (+doom-dashboard--center
      +doom-dashboard--width
      (with-temp-buffer
        (insert-text-button
         line
         'action
         (lambda (_) (+doom-dashboard-reload t))
         'face 'doom-dashboard-menu-title
         'mouse-face 'doom-dashboard-menu-title
         'help-echo "Last crash"
         'follow-link t)
        (buffer-string))))
   (split-string
    (with-temp-buffer
      (insert (doom-last-crash-line))
      (setq fill-column (min 70 (/ (* 2 (window-width)) 3)))
      (fill-region (point-min) (point-max))
      (buffer-string))
    "\n")
   "\n"))

;; Only place this message if ts is available (avoid startup errors)
(when (require 'ts nil 'noerror)
  (defadvice! doom-dashboard-widget-loaded-with-phrase ()
    :override #'doom-dashboard-widget-loaded
    (setq line-spacing 0.2)
    (insert
     "\n\n"
     (propertize
      (+doom-dashboard--center
       +doom-dashboard--width
       (doom-display-benchmark-h 'return))
      'face 'doom-dashboard-loaded)
     "\n"
     (doom-dashboard-phrase)
     "\n")))

(add-hook 'doom-load-theme-hook #'personal-change-doom-dashboard-options)
#+END_SRC

** Useful Functions
*** New Functions
Toggle the transparency of emacs
#+BEGIN_SRC emacs-lisp
;; Initialize transparency to `true`

;; TODO change this to not use global state, but instead use frame-local state

(put 'cfg-transparency 'state t)

(defun personal-toggle-transparency ()
  "Toggle the transparency of emacs"
  (interactive)
  (if (get 'cfg-transparency 'state)
      (progn
        (set-frame-parameter (selected-frame) 'alpha '(100 100))
        (put 'cfg-transparency 'state nil))
    (progn
      (set-frame-parameter (selected-frame) 'alpha '(70 70))
      (put 'cfg-transparency 'state t))
    ))
#+END_SRC

Control size of Emacs frame:
#+BEGIN_SRC emacs-lisp
(defun personal-frame-change-size (width height)
  "Modify size of window frame by increasing it by WIDTH and HEIGHT."
  (let ((cur-width (frame-width (window-frame)))
        (cur-height (frame-height (window-frame))))
    (set-frame-size (window-frame) (+ cur-width width) (+ cur-height height))))

(defun personal-frame-full-screen ()
  "Toggle frame to be fullscreen."
  (interactive)
  (toggle-frame-fullscreen))

(defun personal-frame-increase-width ()
  "Increase frame width by 1."
  (interactive)
  (personal-frame-change-size 1 0))

(defun personal-frame-decrease-width ()
    "Decrease frame width  by 1."
    (interactive)
    (personal-frame-change-size -1 0))

(defun personal-frame-increase-height ()
    "Increase frame height by 1."
    (interactive)
    (personal-frame-change-size 0 1))

(defun personal-frame-decrease-height ()
    "Decrease frame height by 1."
    (interactive)
    (personal-frame-change-size 0 -1))

(defun personal-frame-increase-diag ()
    "Increase frame width and height by 1."
    (interactive)
    (personal-frame-change-size 1 1))

(defun personal-frame-decrease-diag ()
    "Decrease frame width and height by 1."
    (interactive)
    (personal-frame-change-size -1 -1))
#+END_SRC

Control position of emacs frame:
#+BEGIN_SRC emacs-lisp
(defun personal-frame-move (down right)
  "Move window frame by DOWN and RIGHT."
  (pcase (frame-position)
    (`(,x . ,y) (set-frame-position (selected-frame) (+ x right) (+ y down)))))

(defun personal-move-frame-down-30 ()
  "Move window frame down 30."
  (interactive)
  (personal-frame-move 30 0))

(defun personal-move-frame-down-5 ()
  "Move window frame down 5."
  (interactive)
  (personal-frame-move 5 0))

(defun personal-move-frame-up-30 ()
  "Move window frame up 30."
  (interactive)
  (personal-frame-move -30 0))

(defun personal-move-frame-up-5 ()
  "Move window frame down 5."
  (interactive)
  (personal-frame-move -5 0))

(defun personal-move-frame-left-30 ()
  "Move window frame left 30."
  (interactive)
  (personal-frame-move 0 -30))

(defun personal-move-frame-left-5 ()
  "Move window frame left 5."
  (interactive)
  (personal-frame-move 0 -5))

(defun personal-move-frame-right-30 ()
  "Move window frame right 30."
  (interactive)
  (personal-frame-move 0 30))

(defun personal-move-frame-right-5 ()
  "Move window frame right 5."
  (interactive)
  (personal-frame-move 0 5))
#+END_SRC

Change fill-column
#+BEGIN_SRC elisp
#+END_SRC

Open up terminal in narrow vertical split
#+BEGIN_SRC emacs-lisp
(defun personal-sterm ()
  "Opens a terminal in a split on the left"
  (interactive)
  (progn
    (split-window-right 45)
    (+vterm/here t)))
#+END_SRC

Open up google in a split
#+BEGIN_SRC elisp
(defun personal-google-split ()
  "Open google in vertical split using xwidget-webkit"
  (interactive)
  (let ((google-url "https://www.google.com")
        (xwidget-buffer (lambda ()
                          (seq-find
                           (lambda (b) (eq (buffer-local-value 'major-mode b) 'xwidget-webkit-mode))
                           (buffer-list)))))
    (split-window-right)
    (xwidget-webkit-browse-url google-url)
    (switch-to-buffer (funcall xwidget-buffer))))

(defun personal-google-here ()
  "Open google in current buffer"
  (interactive)
  (let ((google-url "https://www.google.com"))
    (personal--xwidget-buffer google-url)))
#+END_SRC

Open google in window with xwidget
#+BEGIN_SRC elisp
(defun personal-open-google ()
  "Open google in in window using xwidget-webkit"
  (interactive)
  (let ((google-url "https://www.google.com"))
    (xwidget-webkit-browse-url google-url)))
#+END_SRC

Add =company-tabnine= to front of completions, which uses GPT-2 to power completions
Some functions to modify =company-backends= on the fly.
#+BEGIN_SRC elisp
(defun personal-use-tabnine-completions ()
  "Prepends tabnine to the front of company backends."
  (interactive)
  (setq company-backends (push  'company-tabnine company-backends)))


(defun personal-use-capf-and-tabnine-completions ()
  "Prepends capf and tabnine to the front of company backends."
  (interactive)
  (setq company-backends (push '(:seperate company-capf company-tabnine) company-backends)))

(defun personal-use-capf-completions ()
  "Prepends capf to the front of company backends"
  (interactive)
  (setq company-backends (push 'company-capf company-backends)))
#+END_SRC
*** Changing Old Ones
... coming soon

*** School
ssh into cornell linux box
#+BEGIN_SRC emacs-lisp
(defun perosnal-connect-cornell ()
  (interactive)
  (dired "/ssh:pno3@ugclinux.cs.cornell.edu:/home/pno3"))
#+END_SRC

** Keybindings and Custom Commands
*** Keybindings
Make moving around splits as easy as pressing space.
#+BEGIN_SRC emacs-lisp
(map! :leader :mode 'global
  "h" #'evil-window-left
  "l" #'evil-window-right
  "j" #'evil-window-down
  "k" #'evil-window-up

  "H" #'+evil/window-move-left
  "L" #'+evil/window-move-right
  "K" #'+evil/window-move-up
  "J" #'+evil/window-move-down
  )
#+END_SRC

Change =;= to =:= (for vim ex mode)
#+BEGIN_SRC emacs-lisp
(map! :nv
  ";" 'evil-ex
  )
#+END_SRC

Map "s" to the sneak motion
#+BEGIN_SRC emacs-lisp
;; Unbind "s" from everything else
(map!
 :map evil-normal-state-map
 "s" nil
 "S" nil)

;; Then bind it
(map!
 :nv "s" #'evil-avy-goto-char-2-below
 :n "S" #'evil-avy-goto-char-2-above)
#+END_SRC

*** Custom ex Commands
~:G~ for magit status
#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "G" #'magit-status)
#+END_SRC

~:S~ to search google and ~:SS~ to open google in current frame
#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "S" #'personal-google-split)
(evil-ex-define-cmd "SS" #'personal-google-here)
#+END_SRC

~:E~ to search google with eww
#+BEGIN_SRC emacs-lisp
(defun personal-eww-google ()
  (interactive)
  (let* ((query (read-from-minibuffer "Search for: "))
         (url-extension (replace-regexp-in-string " " "+" query )))
  (eww (concat "https://www.google.com/search?q=" url-extension))))

(evil-ex-define-cmd "E" #'personal-eww-google)
#+END_SRC

~:Fexplore~ to open a project drawer
#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "Fexplore" #'treemacs)
#+END_SRC

~:PRReview~ to diff between two branches
#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "PRReview" #'magit-diff-range)
#+END_SRC

~:STerm~ to open terminal in a split
#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "STerm" #'personal-sterm)
#+END_SRC

** Fixing Things
A place for hacks and functions to fix fires

Fix icons when run as daemon
#+BEGIN_SRC emacs-lisp
(defun personal-set-company-box-icons ()
  (interactive)
  (setq company-box-icons-all-the-icons
        (let ((all-the-icons-scale-factor 0.8))
          `((Unknown       . ,(all-the-icons-material "find_in_page"             :face 'all-the-icons-purple))
            (Text          . ,(all-the-icons-material "text_fields"              :face 'all-the-icons-green))
            (Method        . ,(all-the-icons-material "functions"                :face 'all-the-icons-red))
            (Function      . ,(all-the-icons-material "functions"                :face 'all-the-icons-red))
            (Constructor   . ,(all-the-icons-material "functions"                :face 'all-the-icons-red))
            (Field         . ,(all-the-icons-material "functions"                :face 'all-the-icons-red))
            (Variable      . ,(all-the-icons-material "adjust"                   :face 'all-the-icons-blue))
            (Class         . ,(all-the-icons-material "class"                    :face 'all-the-icons-red))
            (Interface     . ,(all-the-icons-material "settings_input_component" :face 'all-the-icons-red))
            (Module        . ,(all-the-icons-material "view_module"              :face 'all-the-icons-red))
            (Property      . ,(all-the-icons-material "settings"                 :face 'all-the-icons-red))
            (Unit          . ,(all-the-icons-material "straighten"               :face 'all-the-icons-red))
            (Value         . ,(all-the-icons-material "filter_1"                 :face 'all-the-icons-red))
            (Enum          . ,(all-the-icons-material "plus_one"                 :face 'all-the-icons-red))
            (Keyword       . ,(all-the-icons-material "filter_center_focus"      :face 'all-the-icons-red))
            (Snippet       . ,(all-the-icons-material "short_text"               :face 'all-the-icons-red))
            (Color         . ,(all-the-icons-material "color_lens"               :face 'all-the-icons-red))
            (File          . ,(all-the-icons-material "insert_drive_file"        :face 'all-the-icons-red))
            (Reference     . ,(all-the-icons-material "collections_bookmark"     :face 'all-the-icons-red))
            (Folder        . ,(all-the-icons-material "folder"                   :face 'all-the-icons-red))
            (EnumMember    . ,(all-the-icons-material "people"                   :face 'all-the-icons-red))
            (Constant      . ,(all-the-icons-material "pause_circle_filled"      :face 'all-the-icons-red))
            (Struct        . ,(all-the-icons-material "streetview"               :face 'all-the-icons-red))
            (Event         . ,(all-the-icons-material "event"                    :face 'all-the-icons-red))
            (Operator      . ,(all-the-icons-material "control_point"            :face 'all-the-icons-red))
            (TypeParameter . ,(all-the-icons-material "class"                    :face 'all-the-icons-red))
            (Template      . ,(all-the-icons-material "short_text"               :face 'all-the-icons-green))
            (ElispFunction . ,(all-the-icons-material "functions"                :face 'all-the-icons-red))
            (ElispVariable . ,(all-the-icons-material "check_circle"             :face 'all-the-icons-blue))
            (ElispFeature  . ,(all-the-icons-material "stars"                    :face 'all-the-icons-orange))
            (ElispFace     . ,(all-the-icons-material "format_paint"             :face 'all-the-icons-pink))))))

(add-hook! 'server-after-make-frame-hook #'personal-set-company-box-icons)
#+END_SRC

** Abbrevs
Manage abbreviations
#+BEGIN_SRC emacs-lisp
(quietly-read-abbrev-file (expand-file-name "~/.doom.d/abbrev.el"))
#+END_SRC

* Modes
** Text Mode
Mode for human readable text

Recommend words when typing in text mode files:
#+BEGIN_SRC emacs-lisp
(add-hook! text-mode
  (set-company-backend! 'text-mode 'company-dabbrev 'company-ispell)
)
#+END_SRC

** Org Mode
*** Look
Set the org directory for org related files
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org/agenda/")
#+END_SRC

Make org-mode documents look a little nicer by hiding markers and showing symbols
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
(setq org-pretty-entities t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq
    org-superstar-headline-bullets-list '("⁖" "◉" "○" "✸" "✿")
)
#+END_SRC

_Snippets to prettify Org mode based on this:_ [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][Beautifying Org Mode in Emacs]]:

Make org-mode files use variable pitch fonts to look more like text documents
#+BEGIN_SRC emacs-lisp
(defun personal-set-org-mode-faces ()
  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Helvitica" :height 200 :weight normal))))
   '(fixed-pitch ((t ( :family "MesloLGS Nerd Font" :height 160))))))

(custom-theme-set-faces
 'user
 '(variable-pitch ((t (:family "Helvitica" :height 200 :weight normal))))
 '(fixed-pitch ((t ( :family "MesloLGS Nerd Font" :height 160)))))

(add-hook 'org-mode-hook #'variable-pitch-mode)
(add-hook 'org-mode-hook #'personal-set-org-mode-faces)
#+END_SRC

Files can opt out by having this at the *end* of the file:
#+BEGIN_EXAMPLE org
;; Local Variables:
;; eval: (variable-pitch-mode 0)
;; End:
#+END_EXAMPLE

Some things shouldn't be variable pitch ever:
#+BEGIN_SRC emacs-lisp
(custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-block-begin-line ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (fixed-pitch)))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch))))
   '(org-drawer ((t (:inherit fixed-pitch))))
   '(org-tag ((t (:inherit (fixed-pitch) :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch)))))
   '(line-number ((t (:inherit fixed-pitch))))
   '(line-number-current-line ((t (:inherit fixed-pitch))))
   '(font-lock-comment-face ((t (:inherit fixed-pitch)))))
#+END_SRC

*** Functionality
Set up completion for org mode files
Recommend words when typing in text mode files:
#+BEGIN_SRC emacs-lisp
;; (add-hook! org-mode
;;   (set-company-backend! 'org-mode 'company-dabbrev 'company-ispell))
#+END_SRC

Add =proselint= to lint org-mode
#+BEGIN_SRC elisp
(setq flycheck-proselint-executable "~/Library/Python/3.8/bin/proselint")
#+END_SRC

Setup =org-download=, which makes the process of putting images into orgmode much easier
Put downloaded images into an =images= directory and include timestamp. Use the command =pngpaste= to get the image
from the clipboard.
#+BEGIN_SRC emacs-lisp
(after! org-download
  (setq org-download-method 'directory)
  (setq-default org-download-image-dir "images")
  (setq org-download-timestamp "%Y%m%d-%H%M%S_")
  (setq org-download-screenshot-method "/usr/local/bin/pngpaste %s"))
#+END_SRC

Allow pasting of images with control over the width, and bind it to keybind
#+BEGIN_SRC emacs-lisp
(defun org-download-screenshot-with-size ()
  "Prompt user for a width to paste the image. Only lasts for this one function"
  (interactive)
  (let ((width (read-number "Enter width: ")) (prev-width org-download-image-html-width))
    (progn
      (setq org-download-image-html-width width)
      (org-download-screenshot)
      (setq org-download-image-html-width prev-width))))

(map! :mode 'org-mode :leader
      "v" #'org-download-screenshot-with-size)
#+END_SRC

Make drag-and-drop of images work with dired (untested)
#+BEGIN_SRC emacs-lisp
;; Drag-and-drop to `dired`
(add-hook 'dired-mode-hook 'org-download-enable)
#+END_SRC

Make latex previews nice and big
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 3.0)))
#+END_SRC

** Org Journal
Encrypt the journal
#+BEGIN_SRC elisp
;; ...
#+END_SRC

** Ivy
Config for the search engine, Ivy.

Allow fuzzy searches to make it easier to find matches with less thought.
#+BEGIN_SRC emacs-lisp
(setq ivy-re-builders-alist
      '((t . ivy--regex-fuzzy)))
#+END_SRC

Interactive functions to make toggling fuzzy search and strict search easier
#+BEGIN_SRC emacs-lisp
(defun personal-set-fuzzy-ivy ()
  "Make ivy use fuzzy searching"
  (interactive)
  (setq ivy-re-builders-alist
        '((t . ivy--regex-fuzzy))))

(defun personal-set-strict-ivy ()
  "Make ivy use more strict searching"
  (interactive)
  (setq ivy-re-builders-alist
        '((t . ivy--regex))))
#+END_SRC

Show icons in ivy buffer
#+BEGIN_SRC emacs-lisp
(all-the-icons-ivy-rich-mode 1)
(ivy-rich-mode)
#+END_SRC

** Working with PDFs
Make PDFs look sharper on MacOS
#+BEGIN_SRC emacs-lisp
(setq pdf-view-use-scaling t pdf-view-use-imagemagick nil)
#+END_SRC

** Company
Configurations for Company.

Configure completion settings;
Make it faster for code buffers, but slow for org-mode when writing prose
#+BEGIN_SRC emacs-lisp
(defun personal-set-company-for-prose ()
  "Change company configs for writing prose"
  (interactive)
  (setq
   company-idle-delay 0.3
   company-minimum-prefix-length 4))

(defun personal-set-company-for-code ()
  "Change company configs for writing code"
  (interactive)
  (setq
   company-idle-delay 0.1
   company-minimum-prefix-length 2))
#+END_SRC

Make the company-box frame not transparent
#+BEGIN_SRC emacs-lisp
(after! company-box
  (push '(alpha . 100) company-box-frame-parameters))
#+END_SRC

Fix an issue with =company-box= mode in Doom Emacs, where using perspectives will cause an error that will stop it
from working until Emacs is restarted
#+BEGIN_SRC emacs-lisp
(defun personal-company-box-recreate-main-frame ()
  (interactive)
    (company-box--set-frame (company-box--make-frame)))

(defun personal-company-box-kill-doc-frame ()
  (interactive)
  (delete-frame (frame-local-getq company-box-doc-frame)))
#+END_SRC
** Flycheck
Set python path
#+BEGIN_SRC emacs-lisp
(setq flycheck-json-python-json-executable "/usr/local/bin/python3")
#+END_SRC
** Evil-snipe mode
Disable =evil-snipe= mode to use =evil-avy-goto-char-2-below=
#+BEGIN_SRC emacs-lisp
(remove-hook 'doom-first-input-hook #'evil-snipe-mode)
#+END_SRC

** Evil quickscope
Always turn on quick scope in programming modes
#+BEGIN_SRC elisp
(add-hook 'prog-mode-hook 'turn-on-evil-quickscope-always-mode)
#+END_SRC

Disable font for second matches, and make the letter be bold for first matches
#+BEGIN_SRC elisp
(custom-theme-set-faces
   'user
   '(evil-quickscope-first-face ((t (:inherit unspecified :weight semibold))))
   '(evil-quickscope-second-face ((t (:inherit unspecified :weight unspecified)))))
#+END_SRC

** Epaint
Disable evil mode in =epaint= mode by default, add back the space based window navigation, and the ability to kill the
buffer with "zx"
#+BEGIN_SRC elisp
(after! epaint
  (evil-set-initial-state 'epaint-mode 'emacs)
  (map! :after epaint
        :map epaint-mode-map
        " h" #'evil-window-left
        " l" #'evil-window-right
        " j" #'evil-window-down
        " k" #'evil-window-up
        " H" #'+evil/window-move-left
        " L" #'+evil/window-move-right
        " K" #'+evil/window-move-up
        " J" #'+evil/window-move-down
        "zx" #'kill-current-buffer))
#+END_SRC

** Floatbuf
Add key mappings for floating buffers
#+BEGIN_SRC emacs-lisp
(require 'floatbuf)

(after! floatbuf
  (push '(alpha . 100) floatbuf-frame-params)
  ;; with buffer
  (defun personal-floatbuf-with-buffer ()
    "Create floating buffer with the current buffer."
    (interactive)
    (floatbuf-make-floatbuf))
  ;; with terminal
  (defun personal-floatbuf-with-terminal ()
    "Create floating buffer with the a terminal."
    (interactive)
    (floatbuf-make-floatbuf)
    (+vterm/here nil))
  ;; scratch buffer
  (defun personal-floatbuf-with-scratch ()
    "Create floating buffer with the a scratch buffer"
    (interactive)
    (floatbuf-make-floatbuf-with-buffer (get-buffer "*scratch*")))
  ;; Epaint
  (defun personal-floatbuf-with-epaint ()
    "Create floating buffer with an epaint buffer"
    (interactive)
    (floatbuf-make-floatbuf)
    (epaint))
  ;; web browser
  (defun personal-floatbuf-with-xwidget ()
    "Create floating buffer with the xwidget"
    (interactive)
    (floatbuf-make-floatbuf)
    (personal-google-here))
  ;; mapping
  (map! :leader :mode 'global
        "fbS" #'personal-floatbuf-with-xwidget
        "fbe" #'personal-floatbuf-with-epaint
        "fbf" #'floatbuf-make-floatbuf
        "fbs" #'personal-floatbuf-with-scratch
        "fbt" #'personal-floatbuf-with-terminal))
#+END_SRC

** Lsp mode
Make =lsp-ui= frame not transparent
#+BEGIN_SRC elisp
(after! lsp-ui
  (push '(alpha . 100) lsp-ui-doc-frame-parameters))
#+END_SRC

Kill lsp-ui frame when it not showing documentation properly
#+BEGIN_SRC emacs-lisp
;; TODO
(defun personal-lsp-ui-kill-doc-frame ()
  (interactive)
  (delete-frame (frame-)))
#+END_SRC
** Centaur Tabs
Turn off tabs when the frame has a lot of splits in it (change function =personal-tab-window-limit=)
#+begin_src emacs-lisp
(defun personal-manage-tabs-with-splits (num-splits)
  "Hide tab bar when >= NUM-SPLITS are on the window."
  (if (length> (window-list) (- num-splits 1))
    (walk-windows (lambda (_) (centaur-tabs-local-mode 1)))
    (walk-windows (lambda (_) (centaur-tabs-local-mode -1)))))

(defun personal-tab-window-limit ()
  "Function that is used in hook that calls `personal-manage-tabs-with-splits' with arg."
  (personal-manage-tabs-with-splits 4))

(add-hook! 'window-configuration-change-hook #'personal-tab-window-limit) ;; called too many times
#+end_src

* Programming
** C Family
Setup LSP-mode with clangd based on [[file:~/.emacs.d/modules/lang/cc/README.org::*Eglot with clangd][this]]
#+BEGIN_SRC elisp
(set-eglot-client! 'cc-mode '("clangd" "-j=3" "--clang-tidy"))

;; (setq lsp-clients-clangd-args '("-j=3"
;;                                 "--background-index"
;;                                 "--clang-tidy"
;;                                 "--completion-style=detailed"
;;                                 "--header-insertion=never"))
;; (after! lsp-clangd (set-lsp-priority! 'clangd 2))
#+END_SRC

Map <Space>ff to =ff-find-other-file= for Cpp
#+BEGIN_SRC emacs-lisp
(map! :mode 'cpp-mode :leader
      " ff" #'ff-find-other-file)
#+END_SRC

Add =cppcheck= as a linter to run after =irony= for Cpp
#+BEGIN_SRC emacs-lisp
(after! cpp-mode
  (flycheck-add-next-checker 'irony 'c/c++-cppcheck))
#+END_SRC

Org source blocks should use up to date cpp
#+begin_src emacs-lisp
(defvar org-babel-default-header-args:cpp '((:flags . "-std=c++20")))
#+end_src

** OR Tools
Useful stuff for working with linear programs and the like.

Hook AMPL relate files to [[https://github.com/dpo/ampl-mode][ampl-mode]].
#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist
      (cons '("\\.mod$" . ampl-mode) auto-mode-alist))
(setq auto-mode-alist
      (cons '("\\.dat$" . ampl-mode) auto-mode-alist))
(setq auto-mode-alist
      (cons '("\\.ampl$" . ampl-mode) auto-mode-alist))
(setq auto-mode-alist
      (cons '("\\.ampl$" . ampl-mode) auto-mode-alist))
(setq interpreter-mode-alist
      (cons '("ampl" . ampl-mode)
            interpreter-mode-alist))
(autoload 'ampl-mode "ampl-mode" "Ampl editing mode." t)
#+END_SRC

Recommend previously used words in AMPL mode
#+BEGIN_SRC emacs-lisp
(add-hook! ampl-mode
  (set-company-backend! 'ampl-mode 'company-dabbrev))
#+END_SRC
** Rust
Configs for coding in the rust programming language.

Set ~RUST_SRC_PATH~ for racer:
#+BEGIN_SRC emacs-lisp
(let* ((rust-lib-path "/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library")
       (rust-full-path (concat (substitute-in-file-name "$HOME") rust-lib-path)))
  (setq racer-rust-src-path rust-full-path))
#+END_SRC

Setup completion in rust
#+BEGIN_SRC emacs-lisp
(add-hook! rust-mode
  (set-company-backend! 'rust-mode '(company-capf company-dabbrev company-yasnippet)))
#+END_SRC

** Swift
Configurations for the swift programming language.

Setup =lsp-sourcekit= to work swift files...
#+BEGIN_SRC emacs-lisp
;; (after! lsp-sourcekit
;;   (setenv "SOURCEKIT_TOOLCHAIN_PATH" "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain")
;;   (setq lsp-sourcekit-executable (string-trim (shell-command-to-string "xcrun --find sourcekit-lsp"))))
#+END_SRC

Recommend previously used words in swift files to compensate for spotty sourcekit support:
#+BEGIN_SRC emacs-lisp
(add-hook! swift-mode
  (set-company-backend! 'swift-mode '(company-sourcekit company-dabbrev company-capf company-yasnippet)))
#+END_SRC

Add =swiftlint= as a linter in swift files
#+BEGIN_SRC elisp
(with-eval-after-load 'flycheck
  (flycheck-swiftlint-setup))
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
(setq flycheck-python-flake8-executable "~/Library/Python/3.8/bin/flake8")
#+END_SRC

Which python is used:
#+BEGIN_SRC emacs-lisp
(setq python-shell-exec-path '("/usr/local/bin/python3"))
(setq python-shell-remote-exec-path '("/usr/local/bin/python3"))
#+END_SRC

Map the commands for sending lines to REPL to something less painful
#+BEGIN_SRC emacs-lisp
(map! :mode 'python-mode :leader
      "ml" #'python-shell-send-statement
      "mr" #'python-shell-send-region
      "mf" #'python-shell-send-defun)
#+END_SRC

* Misc/Random
** Fun Stuff
 Fun Emacs things

 Zone mode screen saver after a good amount of idle time
 #+BEGIN_SRC emacs-lisp
 (require 'zone)
 (zone-when-idle 600) ;; 10 minutes
 #+END_SRC

Disable all non productive stuff (for lectures or presentations)
#+BEGIN_SRC emacs-lisp
(defun personal-look-professional ()
  "Disable all idle animations and related."
  (interactive)
  (huecycle-stop-idle)
  (huecycle-reset-all-faces-on-all-buffers)
  (zone-leave-me-alone))
#+END_SRC

Add rainbow to zone programs
#+BEGIN_SRC elisp
(setq zone-programs (vconcat [zone-rainbow] zone-programs))
#+END_SRC

Enable sound support
#+BEGIN_SRC elisp
(unless (and (fboundp 'play-sound-internal)
             (subrp (symbol-function 'play-sound-internal)))
  (require 'play-sound))
#+END_SRC

Set some faces to change color when idle
#+BEGIN_SRC elisp
(require 'huecycle)

(after! (huecycle doom-modeline hl-line)
  (huecycle-set-faces
 ;; rainbow stuff
   ((background . hl-line)
    :random-color-hue-range (0.0 1.0)
    :random-color-saturation-range (0.1 0.45)
    :random-color-luminance-range (0.1 0.25)
    :speed 0.5
    :persist t)
   ((foreground . (doom-modeline-evil-normal-state doom-modeline-evil-insert-state doom-modeline-buffer-major-mode))
    :random-color-hue-range (0.0 1.0)
    :random-color-saturation-range (0.8 1.0)
    :random-color-luminance-range (0.5 0.8))
   ((foreground . (line-number-current-line ))
    :random-color-hue-range (0.0 1.0)
    :random-color-saturation-range (0.9 1.0)
    :random-color-luminance-range (0.5 0.8)
    :speed 0.6
    :persist t)
   ((foreground . region)
    :random-color-hue-range (0.0 1.0)
    :random-color-saturation-range (0.9 1.0)
    :random-color-luminance-range (0.5 0.8))
   ((background . company-tooltip-selection)
    :random-color-hue-range (0.0 1.0)
    :random-color-saturation-range (0.2 0.4)
    :random-color-luminance-range (0.2 0.4)))
  (setq huecycle-buffers-to-huecycle-in
        (list
         #'current-buffer
         (lambda ()
           (company-box--get-buffer))))
  (huecycle-when-idle 1.0))
#+END_SRC

** Scratch Space
Space for random elisp
#+BEGIN_SRC elisp

(require 'tetris-sounds)

(server-start)

#+END_SRC

* Orgmode footer args
#+localWords: MacOS, PDFs, ampl, Config, Configs, sourcekit, flycheck
