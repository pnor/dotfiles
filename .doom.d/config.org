#+TITLE: Org Mode Configuration
#+AUTHOR: Phillip O'Reggio
#+PROPERTY: header-args :emacs-lisp :tangle yes :comments link
#+STARTUP: hideblocks overview
#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC

* General
** Private Information
Load some personal information
#+BEGIN_SRC emacs-lisp
(load! "Secret.el")
#+END_SRC

** Font, Themes, and the General Look and Behavior
*** Look
Set the color theme and font
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'cornell)
(setq doom-font (font-spec :family "MesloLGS Nerd Font" :size 16))
#+END_SRC

Make the emacs frame transparent because I like my laptop background üôÉ
#+BEGIN_SRC emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(70 70))
(add-to-list 'default-frame-alist '(alpha 70 70))
#+END_SRC

Make emacs start centered, in a large frame.
#+BEGIN_SRC emacs-lisp
(setq initial-frame-alist '((top . 50) (left . 40) (width . 160) (height . 45)))
#+END_SRC

Show Line numbers
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
#+END_SRC

Modify the appearance of the mode-line
#+BEGIN_SRC elisp
(setq doom-modeline-major-mode-icon t)
#+END_SRC

*** Behavior
Add a fill column to prevent long lines (116 is the width of the vertical monitor)
#+BEGIN_SRC emacs-lisp
(setq-default fill-column 116)
#+END_SRC

and automatically break long lines in source code buffers and org mode files
#+BEGIN_SRC emacs-lisp
(add-hook! prog-mode (auto-fill-mode t))
(add-hook! org-mode (auto-fill-mode t))
#+END_SRC

Show a message when doing garbage collection
#+BEGIN_SRC emacs-lisp
(setq garbage-collection-messages t)
#+END_SRC

Have evil-mode treat emacs /symbols/ as words instead of by character
(symbol definition changes based on the language)
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'evil
    (defalias #'forward-evil-word #'forward-evil-symbol)
    ;; make evil-search-word look for symbol rather than word boundaries
    (setq-default evil-symbol-word-search t))

#+END_SRC
** Useful Functions
*** New Functions
Toggle the transparency of emacs
#+BEGIN_SRC emacs-lisp
;; Initialize transparency to `true`

;; TODO change this to not use global state, but instead use frame-local state

(put 'cfg-transparency 'state t)

(defun personal-toggle-transparency ()
  "Toggle the transparency of emacs"
  (interactive)
  (if (get 'cfg-transparency 'state)
      (progn
        (set-frame-parameter (selected-frame) 'alpha '(100 100))
        (put 'cfg-transparency 'state nil))
    (progn
      (set-frame-parameter (selected-frame) 'alpha '(70 70))
      (put 'cfg-transparency 'state t))
    ))
#+END_SRC

Open up terminal in narrow vertical split
#+BEGIN_SRC emacs-lisp
(defun personal-sterm ()
  "Opens a terminal in a split on the left"
  (interactive)
  (progn
    (split-window-right 45)
    (+vterm/here t)))
#+END_SRC

Open up google in a split
#+BEGIN_SRC elisp
(defun personal-open-google-xwidget () (interactive)
       "Open google in vertical split using xwidget-webkit"
       (let ((google-url "https://www.google.com")
             (xwidget-buffer (lambda ()
                               (seq-find
                                (lambda (b) (eq (buffer-local-value 'major-mode b) 'xwidget-webkit-mode))
                                (buffer-list)))))
         (split-window-right)
         (xwidget-webkit-browse-url google-url)
         (switch-to-buffer (funcall xwidget-buffer))))
#+END_SRC

Add =company-tabnine= to front of completions, which uses GPT-2 to power completions
Some functions to modify =company-backends= on the fly.
#+BEGIN_SRC elisp
(defun personal-use-tabnine-completions ()
  "Prepends tabnine to the front of company backends."
  (interactive)
  (setq company-backends (push  'company-tabnine company-backends)))


(defun personal-use-capf-and-tabnine-completions ()
  "Prepends capf and tabnine to the front of company backends."
  (interactive)
  (setq company-backends (push '(:seperate company-capf company-tabnine) company-backends)))

(defun personal-use-capf-completions ()
  "Prepends capf to the front of company backends"
  (interactive)
  (setq company-backends (push 'company-capf company-backends)))
#+END_SRC

*** Changing Old Ones
... coming soon

** Keybindings and Custom Commands
*** Keybindings
Make moving around splits as easy as pressing space.
#+BEGIN_SRC emacs-lisp
(map! :leader :mode 'global
  "h" #'evil-window-left
  "l" #'evil-window-right
  "j" #'evil-window-down
  "k" #'evil-window-up

  "H" #'+evil/window-move-left
  "L" #'+evil/window-move-right
  "K" #'+evil/window-move-up
  "J" #'+evil/window-move-down
  )
#+END_SRC

Change =;= to =:= (for vim ex mode)
#+BEGIN_SRC emacs-lisp
(map! :nv
  ";" 'evil-ex
  )
#+END_SRC

Map "s" to the sneak motion
#+BEGIN_SRC emacs-lisp
;; Unbind "s" from everything else
(map! :after evil
      :map evil-normal-state-map
      "s" nil
      "S" nil)
(map! :after evil-snipe
      :map evil-snipe-local-mode-map
      :mno "s" nil
      :mno "S" nil)
;; Then bind it
(map!
 :nv "s" #'evil-avy-goto-char-2-below
 :n "S" #'evil-avy-goto-char-2-above
 )
#+END_SRC

*** Custom ex Commands
~:G~ for magit status
#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "G" #'magit-status)
#+END_SRC

~:S~ to search google
#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "S" #'personal-open-google-xwidget)

(defun tester (str)
  (print str))

(evil-ex-define-cmd "Tester" #'tester)

#+END_SRC

~:Fexplore~ to open a project drawer
#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "Fexplore" #'treemacs)
#+END_SRC

~:PRReview~ to diff between two branches
#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "PRReview" #'magit-diff-range)
#+END_SRC

~:STerm~ to open terminal in a split
#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "STerm" #'personal-sterm)
#+END_SRC

* Modes
** Text Mode
Mode for human readable text

Recommend words when typing in text mode files:
#+BEGIN_SRC emacs-lisp
(add-hook! text-mode
  (set-company-backend! 'text-mode 'company-dabbrev 'company-ispell)
)
#+END_SRC

** Org Mode
*** Look
Set the org directory for org related files
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org/agenda/")
#+END_SRC

Make org-mode documents look a little nicer by hiding markers and showing symbols
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
(setq org-pretty-entities t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq
    org-superstar-headline-bullets-list '("‚Åñ" "‚óâ" "‚óã" "‚ú∏" "‚úø")
)
#+END_SRC

_Snippets to prettify Org mode based on this:_ [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][Beautifying Org Mode in Emacs]]:

Make org-mode files use variable pitch fonts to look more like text documents
#+BEGIN_SRC emacs-lisp
 (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Helvitica" :height 200 :weight normal))))
   '(fixed-pitch ((t ( :family "MesloLGS Nerd Font" :height 160)))))

(add-hook 'org-mode-hook 'variable-pitch-mode)
#+END_SRC

Files can opt out by having this at the *end* of the file:
#+BEGIN_EXAMPLE org
;; Local Variables:
;; eval: (variable-pitch-mode 0)
;; End:
#+END_EXAMPLE

Some things shouldn't be variable pitch ever:
#+BEGIN_SRC emacs-lisp
(custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-block-begin-line ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (fixed-pitch)))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch))))
   '(org-drawer ((t (:inherit fixed-pitch))))
   '(org-tag ((t (:inherit (fixed-pitch) :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch)))))
   '(line-number ((t (:inherit fixed-pitch))))
   '(line-number-current-line ((t (:inherit fixed-pitch))))
   '(font-lock-comment-face ((t (:inherit fixed-pitch)))))
#+END_SRC

*** Functionality
Set up completion for org mode files
Recommend words when typing in text mode files:
#+BEGIN_SRC emacs-lisp
(add-hook! org-mode
  (set-company-backend! 'org-mode 'company-dabbrev 'company-ispell)
)
#+END_SRC

Add =proselint= to lint org-mode
#+BEGIN_SRC elisp
(setq flycheck-proselint-executable "~/Library/Python/3.8/bin/proselint")
#+END_SRC

Setup =org-download=, which makes the process of putting images into orgmode much easier
Put downloaded images into an =images= directory and include timestamp. Use the command =pngpaste= to get the image
from the clipboard.
#+BEGIN_SRC emacs-lisp
(after! org-download
  (setq org-download-method 'directory)
  (setq-default org-download-image-dir "images")
  (setq org-download-timestamp "%Y%m%d-%H%M%S_")
  (setq org-download-screenshot-method "/usr/local/bin/pngpaste %s"))
#+END_SRC

Allow pasting of images with control over the width, and bind it to keybind
#+BEGIN_SRC emacs-lisp
(defun org-download-screenshot-with-size ()
  "Prompt user for a width to paste the image. Only lasts for this one function"
  (interactive)
  (let ((width (read-number "Enter width: ")) (prev-width org-download-image-html-width))
    (progn
      (setq org-download-image-html-width width)
      (org-download-screenshot)
      (setq org-download-image-html-width prev-width))
    ))

(map! :mode 'org-mode :leader
      "v" #'org-download-screenshot-with-size
      )
#+END_SRC

Make drag-and-drop of images work with dired (untested)
#+BEGIN_SRC emacs-lisp
;; Drag-and-drop to `dired`
(add-hook 'dired-mode-hook 'org-download-enable)
#+END_SRC

** Org Journal
Encrypt the journal
#+BEGIN_SRC elisp
;; ...
#+END_SRC

** Ivy
Config for the search engine, Ivy.

Allow fuzzy searches to make it easier to find matches with less thought.
#+BEGIN_SRC emacs-lisp

(setq ivy-re-builders-alist
      '((t . ivy--regex-fuzzy)))
#+END_SRC

Show icons in ivy buffer
#+BEGIN_SRC emacs-lisp
(all-the-icons-ivy-rich-mode 1)
(ivy-rich-mode)
#+END_SRC

** Working with PDFs
Make PDFs look sharper on MacOS
#+BEGIN_SRC emacs-lisp
(setq pdf-view-use-scaling t pdf-view-use-imagemagick nil)
#+END_SRC

** Company
Configurations for Company.

Configure completion settings;
Make it faster for code buffers, but slow for org-mode when writing prose
#+BEGIN_SRC emacs-lisp
(defun personal-set-company-for-prose ()
  "Change company configs for writing prose"
  (interactive)
  (setq
   company-idle-delay 0.3
   company-minimum-prefix-length 4))

(defun personal-set-company-for-code ()
  "Change company configs for writing code"
  (interactive)
  (setq
   company-idle-delay 0.1
   company-minimum-prefix-length 2))

(after! company (add-hook! '(org-mode text-mode) (personal-set-company-for-prose)))
(after! company (add-hook! prog-mode (personal-set-company-for-code)))
#+END_SRC

Make the company-box frame not transparent
#+BEGIN_SRC emacs-lisp
(after! company-box
  (push '(alpha . 100) company-box-frame-parameters))
#+END_SRC

** Flycheck
Set python path
#+BEGIN_SRC emacs-lisp
(setq flycheck-json-python-json-executable "/usr/bin/python3")
#+END_SRC
** Evil-snipe mode
Disable its keybindings to use =evil-avy-goto-char-2-below=
#+BEGIN_SRC emacs-lisp
(after! evil-snipe
  (evil-snipe-mode nil)
  (evil-snipe-override-mode nil))
#+END_SRC

** Evil quickscope
Always turn on quick scope in programming modes
#+BEGIN_SRC elisp
(add-hook 'prog-mode-hook 'turn-on-evil-quickscope-always-mode)
#+END_SRC

Disable font for second matches, and make the letter be bold for first matches
#+BEGIN_SRC elisp
(custom-theme-set-faces
   'user
   '(evil-quickscope-first-face ((t (:inherit unspecified :weight semibold))))
   '(evil-quickscope-second-face ((t (:inherit unspecified :weight unspecified)))))
#+END_SRC

** webkit-katex-render
Set =webkit-katex-render--client-path= to the repos directory, and use a light background for the preview
#+BEGIN_SRC elisp
(setq webkit-katex-render--client-path
      (concat
       "file://"
       (expand-file-name "~/")
       ".emacs.d/.local/straight/repos/emacs-webkit-katex-render/katex.html"))

(setq webkit-katex-render--background-color (doom-color 'bg))
#+END_SRC

* Programming
** Emacs Lisp
Set company backend so it gives better support
#+BEGIN_SRC elisp
(add-hook! elisp-mode
  (set-company-backend! 'elisp-mode '((company-capf company-dabbrev))))
#+END_SRC
** C Family
Setup LSP-mode with clangd based on this: [[file:~/.emacs.d/modules/lang/cc/README.org::*LSP-mode with clangd][LSP-mode with clangd]]
#+BEGIN_SRC elisp
(setq lsp-clients-clangd-args '("-j=3"
                                "--background-index"
                                "--clang-tidy"
                                "--completion-style=detailed"
                                "--header-insertion=never"))
(after! lsp-clangd (set-lsp-priority! 'clangd 2))
#+END_SRC
** OR Tools
Useful stuff for working with linear programs and the like.

Hook AMPL relate files to [[https://github.com/dpo/ampl-mode][ampl-mode]].
#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist
      (cons '("\\.mod$" . ampl-mode) auto-mode-alist))
(setq auto-mode-alist
      (cons '("\\.dat$" . ampl-mode) auto-mode-alist))
(setq auto-mode-alist
      (cons '("\\.ampl$" . ampl-mode) auto-mode-alist))
(setq auto-mode-alist
      (cons '("\\.ampl$" . ampl-mode) auto-mode-alist))
(setq interpreter-mode-alist
      (cons '("ampl" . ampl-mode)
            interpreter-mode-alist))
(autoload 'ampl-mode "ampl-mode" "Ampl editing mode." t)
#+END_SRC

Recommend previously used words in AMPL mode
#+BEGIN_SRC emacs-lisp
(add-hook! ampl-mode
  (set-company-backend! 'ampl-mode 'company-dabbrev))
#+END_SRC
** Rust
Configs for coding in the rust programming language.

Set ~RUST_SRC_PATH~ for racer:
#+BEGIN_SRC emacs-lisp
(let* ((rust-lib-path "/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library")
       (rust-full-path (concat (substitute-in-file-name "$HOME") rust-lib-path)))
  (setq racer-rust-src-path rust-full-path))
#+END_SRC

Setup completion in rust
#+BEGIN_SRC emacs-lisp
(add-hook! rust-mode
  (set-company-backend! 'rust-mode '(company-capf company-dabbrev company-yasnippet)))
#+END_SRC

** Swift
Configurations for the swift programming language.

Setup =lsp-sourcekit= to work swift files...
#+BEGIN_SRC emacs-lisp
(after! lsp-sourcekit
         (setenv "SOURCEKIT_TOOLCHAIN_PATH" "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain")
         (setq lsp-sourcekit-executable
               (expand-file-name "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/sourcekit-lsp")))

(add-hook! swift-mode (defun personal-start-lsp () lsp))
#+END_SRC

Recommend previously used words in swift files to compensate for spotty sourcekit support:
#+BEGIN_SRC emacs-lisp
(add-hook! swift-mode
  (set-company-backend! 'swift-mode '(company-dabbrev company-capf company-yasnippet))
)
#+END_SRC

Add =swiftlint= as a linter in swift files
#+BEGIN_SRC elisp
(with-eval-after-load 'flycheck
  (flycheck-swiftlint-setup))
#+END_SRC

** Python
Fix paths to python since homebrew on Macos is seemingly broken
#+BEGIN_SRC emacs-lisp
(setq flycheck-python-flake8-executable "~/Library/Python/3.8/bin/flake8")
#+END_SRC

Setup completion in python
#+BEGIN_SRC emacs-lisp
(add-hook! python-mode
  (set-company-backend! 'python-mode 'company-capf 'company-dabbrev 'company-yasnippet)
  )
#+END_SRC
** Class Specific
Use custom file for Harmony (4410)
#+BEGIN_SRC emacs-lisp
(require 'harmony-mode)
(autoload 'harmony-mode "harmony-mode" "Harmony editing mode." t)

(setq auto-mode-alist
      (cons '("\\.hny$" . harmony-mode) auto-mode-alist))

(add-hook! harmony-mode (display-line-numbers--turn-on))
#+END_SRC

* Misc/Random
** Fun Stuff
 Fun Emacs things

 Zone mode screen saver after a good amount of idle time
 #+BEGIN_SRC emacs-lisp
 (require 'zone)
 (zone-when-idle 600) ;; 10 minutes
 #+END_SRC

Add rainbow to zone programs
#+BEGIN_SRC elisp
(setq zone-programs (vconcat [zone-rainbow] zone-programs))
#+END_SRC

Enable sound support
#+BEGIN_SRC elisp
(unless (and (fboundp 'play-sound-internal)
             (subrp (symbol-function 'play-sound-internal)))
  (require 'play-sound))
#+END_SRC
** Scratch Space
Space for random elisp
#+BEGIN_SRC elisp

(require 'tetris-sounds)

#+END_SRC

* Orgmode footer args
#+localWords: MacOS, PDFs, ampl, Config, Configs, sourcekit, flycheck
