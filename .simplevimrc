" ---------------------------------------------------------------------------- "
" Config                                                                       "
" ---------------------------------------------------------------------------- "
set nocompatible

set number  " Add line Numbers
syntax on   " Add syntax highlighting
set relativenumber " Relative number (due to absence of sneak jumps)

" Filetype config
filetype on
filetype plugin on " load plugins for specific file types
filetype indent on " auto indent

" Search
set hlsearch
set incsearch

" Search ignores case unless you use uppercase
set smartcase
set ignorecase

" Tabs are 4 spaces for proper files
set tabstop     =4
set softtabstop =4
set shiftwidth  =4
set expandtab

" Spell Checking
autocmd FileType markdown setlocal spell

" Remove dog trails
set noswapfile
set nobackup
set noundofile

" ins-completion
set completeopt=menuone,longest,preview

" backspace can delete whitespace/break indents
set backspace=indent,eol,start

" :find works as file fuzzy finder
set path+=&pwd,src/**,config/**
set wildmenu

" Enable italics
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

" Load matchit so % matches if-else-endif
runtime! macros/matchit.vim

" Enable true color
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

" Remember Last cursor location
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"zz" | endif
endif

" Line for over 80 characters
set textwidth=80
set colorcolumn=+0

" Always have 4 lines of context for cursor
set scrolloff=4

" ---------------------------------------------------------------------------- "
" Statusline                                                                   "
" ---------------------------------------------------------------------------- "
function CurrentGitStatus() " Gets the current git status for the statusline
    let gitoutput = split(system('git status --porcelain -b '.shellescape(expand('%')).' 2>/dev/null'),'\n')
    if len(gitoutput) > 0
        let name = strpart(get(gitoutput,0,''),3)
        let gittag = strpart(get(gitoutput,1,'  '),0,2)
        if exists("*trim")
            let b:gitstatus = name . ' [' . trim(gittag) . ']'
        endif
    else
        let b:gitstatus = ''
    endif
endfunc

"hi! link StatusLine Normal
"hi! link StatusLineGit Keyword
"hi! link StatusLineBufferNr Search

autocmd BufEnter,BufWritePost * call CurrentGitStatus()
autocmd FileType netrw call CurrentGitStatus()

set laststatus=2
set statusline=
set statusline +=%#StatusLineBufferNr#\ %n\ %*   " buffer number
set statusline +=\ %<%f%*   " file
set statusline +=%m%r%w%q%*     " modified flag
set statusline +=%#StatusLineGit#\ \ %(%{b:gitstatus}%)\ %* " git branch
set statusline +=%=
set statusline +=\ %{&ff}%*  " file format
set statusline +=%y%*   " file type
set statusline +=%5l%*  " current line
set statusline +=/%L\ \ %*  " total lines


" ---------------------------------------------------------------------------- "
" Mapping                                                                      "
" ---------------------------------------------------------------------------- "
nnoremap <silent> <C-l> :nohl<CR><C-l> " <Ctrl-l> redraws, removing search highlighting.

" Escape to jk to leave insert mode
inoremap jk <Esc>
inoremap JK <Esc>
" Enter escapes visual mode
vnoremap <CR> <Esc>

" s to move to text nearby
nnoremap s ?

" Map ; to :
map ; :

" Change , to ;
nnoremap , ;
vnoremap , ;

" Use Spacebar for window navigation
nmap <Space> <C-w>

" Move Faster with arrows
nnoremap <Up> 8k
vnoremap <Up> 4k
nnoremap <Down> 8j
vnoremap <Down> 4j
nnoremap <Right> 4l
nnoremap <Left> 4h

" Insert completion
inoremap <Leader><Tab> <C-n> " Leader-Tab opens ins-completion menu
" Tab and Shift Tab navigates completion menu
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "<C-n>"
" Enter accepts hovered selection on menu
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"

" Leader-f triggers find
nnoremap <Space><Space> :find<Space>
nnoremap <Leader>f :find<Space>

" Fix spelling errors
imap *L <Esc>[s1z=`]a

" Terminal Sidebar
if v:version >= 801
    command STerm execute "vert term" | execute "normal! <C-w>45<"
endif

" Open a VSCode-Style File Explorer Sidebar
if ! exists("g:loaded_netrw")
    command Fexplore
        \ execute "let g:netrw_liststyle = 3" |
        \ execute "let g:netrw_browse_split = 4" |
        \ execute "Vexplore" |
        \ execute "normal! <C-w>55<<C-w>w"
endif

" Trailing Whitespace
command ShowWhitespace /\s\+$
command StripTrailingWhitespace :%s/\s\+$//g
" Fold based on pattern
command! -nargs=+ Foldsearch exe "normal /".<q-args>."\r" | setlocal foldexpr=(getline(v:lnum)=~@/)?0:(getline(v:lnum-1)=~@/)\|\|(getline(v:lnum+1)=~@/)?1:2 foldmethod=expr foldlevel=0 foldcolumn=0


" ---------------------------------------------------------------------------- "
" Set Color Theme / Display                                                    "
" ---------------------------------------------------------------------------- "
colo torte

" Statusline Colors
hi User1 guibg=#111111               " Gray background
hi User2 guifg=#ffffff guibg=#111111 " Git status
hi User3 guifg=#ff0000 guibg=#111111 " Modified Flag
